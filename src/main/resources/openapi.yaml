openapi: 3.0.3
info:
  title: API for Streaming Service
  version: 1.0.0
  description: |
    API for managing users and their streaming activities with JWT authentication
tags:
  - name: auth
    description: Authentication operations
  - name: users
    description: Operations on users
  - name: streams
    description: Operations on streams
servers:
  - url: http://localhost:8080/api
    description: Local dev platform

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from /auth/login

  schemas:
    # Auth
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token for authentication
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    UserAuthRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "john_doe"
        password:
          type: string
          format: password
          example: "securePassword123"

    # Users
    UserRegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 20
          example: "john_doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        password:
          type: string
          format: password
          minLength: 8
          example: "securePassword123"
        avatarUrl:
          type: string
          nullable: true
          example: "https://example.com/avatar.jpg"
        bio:
          type: string
          nullable: true
          maxLength: 500
          example: "Streamer and gamer"

    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        username:
          type: string
          example: "john_doe"
        email:
          type: string
          example: "john@example.com"
        avatarUrl:
          type: string
          nullable: true
        bio:
          type: string
          nullable: true
        followerCount:
          type: integer
          minimum: 0
          example: 42
        streamKey:
          type: string
          format: uuid
          description: Only visible for own profile or admins
          example: "550e8400-e29b-41d4-a716-446655440001"

    UserUpdateRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          nullable: true
        avatarUrl:
          type: string
          nullable: true
        bio:
          type: string
          nullable: true
          maxLength: 500

    StreamRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          maxLength: 100
          example: "My Awesome Stream"
        description:
          type: string
          nullable: true
          maxLength: 500
        tags:
          type: array
          items:
            type: string
            maxLength: 20
          example: ["gaming", "esports"]

    StreamResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
          nullable: true
        thumbnailUrl:
          type: string
          nullable: true
        streamKey:
          type: string
          format: uuid
        tags:
          type: array
          items:
            type: string
        isLive:
          type: boolean
        startedAt:
          type: string
          format: date-time
          nullable: true
        endedAt:
          type: string
          format: date-time
          nullable: true
        viewerCount:
          type: integer
          minimum: 0

  parameters:
    UserUsername:
      name: userUsername
      in: path
      required: true
      schema:
        type: string
        example: "john_doe"
    UserId:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
        example: "550e8400-e29b-41d4-a716-446655440000"
    StreamId:
      name: streamId
      in: path
      required: true
      schema:
        type: string
        format: uuid
        example: "550e8400-e29b-41d4-a716-446655440002"

paths:
  /auth/login:
    post:
      tags: [auth]
      summary: Authenticate user
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAuthRequest'
      responses:
        200:
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        401:
          description: Invalid credentials
        404:
          description: User not found

  /auth/register:
    post:
      tags: [auth]
      summary: Register new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        400:
          description: Validation error
        409:
          description: Username or email already exists
  /users:
    get:
      tags: [users]
      summary: Get all users
      operationId: getAllUsers
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        401:
          description: Unauthorized
  /users/me:
    get:
      tags: [ users ]
      summary: Get current user profile
      operationId: getCurrentUserProfile
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Current user's data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        401:
          description: Unauthorized
    put:
      tags: [ users ]
      summary: Update user profile
      operationId: updateUser
      parameters:
        - $ref: '#/components/parameters/UserId'
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        200:
          description: Profile updated successfully
        400:
          description: Validation error
        401:
          description: Unauthorized
        403:
          description: Forbidden (not your profile)
        404:
          description: User not found

  /users/me/streamkey:
    put:
      tags: [ users ]
      summary: Regenerate stream key for current user
      operationId: regenerateCurrentUserStreamKey
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Stream key updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  newStreamKey:
                    type: string
                    format: uuid
        401:
          description: Unauthorized

  /users/{id}:
    get:
      tags: [users]
      summary: Get user by ID
      operationId: getUserById
      parameters:
        - $ref: '#/components/parameters/UserId'
      security:
        - bearerAuth: []
      responses:
        200:
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        401:
          description: Unauthorized
        404:
          description: User not found

    delete:
      tags: [users]
      summary: Delete user
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/UserId'
      security:
        - bearerAuth: []
      responses:
        204:
          description: User deleted successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: User not found


  /users/{userUsername}:
    get:
      tags: [users]
      summary: Get user by username
      operationId: getUserByUsername
      parameters:
        - $ref: '#/components/parameters/UserUsername'
      security:
        - bearerAuth: []
      responses:
        200:
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        401:
          description: Unauthorized
        404:
          description: User not found

  /streams:
    get:
      tags: [ streams ]
      summary: Get all streams
      operationId: getAllStreams
      responses:
        200:
          description: List of all streams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StreamResponse'
        401:
          description: Unauthorized

    post:
      tags: [ streams ]
      summary: Create new stream
      operationId: createStream
      security:
        - bearerAuth: [ ]
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StreamRequest'
      responses:
        201:
          description: Stream created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamResponse'
        400:
          description: Invalid input
        401:
          description: Unauthorized
        403:
          description: Forbidden (user mismatch)

  /streams/live:
    get:
      tags: [ streams ]
      summary: Get live streams
      operationId: getLiveStreams
      responses:
        200:
          description: List of currently live streams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StreamResponse'

  /streams/{id}:
    get:
      tags: [ streams ]
      summary: Get stream by ID
      operationId: getStreamById
      parameters:
        - $ref: '#/components/parameters/StreamId'
      responses:
        200:
          description: Stream details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamResponse'
        404:
          description: Stream not found

    put:
      tags: [ streams ]
      summary: Update stream
      operationId: updateStream
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/StreamId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StreamRequest'
      responses:
        200:
          description: Stream updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamResponse'
        401:
          description: Unauthorized
        403:
          description: Forbidden (not stream owner)
        404:
          description: Stream not found

    delete:
      tags: [ streams ]
      summary: Delete stream
      operationId: deleteStream
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/StreamId'
      responses:
        204:
          description: Stream deleted
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Stream not found

  /streams/user/{userId}:
    get:
      tags: [ streams ]
      summary: Get streams by user
      operationId: getStreamsByUser
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        200:
          description: List of user's streams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StreamResponse'

  /streams/search:
    get:
      tags: [ streams ]
      summary: Search streams
      operationId: searchStreams
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StreamResponse'

  /streams/{id}/start:
    post:
      tags: [ streams ]
      summary: Start stream
      operationId: startStream
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/StreamId'
      responses:
        200:
          description: Stream started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamResponse'
        401:
          description: Unauthorized
        403:
          description: Forbidden (not stream owner)
        404:
          description: Stream not found

  /streams/{id}/end:
    post:
      tags: [ streams ]
      summary: End stream
      operationId: endStream
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/StreamId'
      responses:
        200:
          description: Stream ended
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamResponse'
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Stream not found

  /streams/{id}/reset-key:
    post:
      tags: [ streams ]
      summary: Reset stream key
      operationId: resetStreamKey
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/StreamId'
        - name: userId
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: New stream key generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  newStreamKey:
                    type: string
                    format: uuid
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Stream not found
